{"version":3,"sources":["ui-bootstrap/src/dynamic-form-bootstrap.component.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form-bootstrap.component.spec.js","sourcesContent":["import {TestBed, async, inject} from \"@angular/core/testing\";\nimport {ReactiveFormsModule, FormGroup, FormControl} from \"@angular/forms\";\nimport {\n    DynamicFormsCoreModule,\n    DynamicFormService,\n    DynamicInputModel,\n    DynamicFormControlModel\n} from \"@ng2-dynamic-forms/core\";\nimport {DynamicFormBootstrapComponent, DYNAMIC_FORM_UI_BOOTSTRAP} from \"./dynamic-form-bootstrap.component\";\n\ndescribe(\"DynamicFormBootstrapComponent test suite\", () => {\n\n    let formModel = [new DynamicInputModel({id: \"test\"})],\n        formGroup,\n        fixture,\n        component;\n\n    beforeEach(async(() => {\n\n        TestBed.configureTestingModule({\n            imports: [\n                ReactiveFormsModule,\n                DynamicFormsCoreModule.forRoot()\n            ],\n            declarations: [DynamicFormBootstrapComponent]\n        });\n\n        TestBed.compileComponents();\n    }));\n\n    beforeEach(inject([DynamicFormService], service => {\n\n        formGroup = service.createFormGroup(formModel);\n\n        fixture = TestBed.createComponent(DynamicFormBootstrapComponent);\n        component = fixture.componentInstance;\n\n        component.controlGroup = formGroup;\n        component.model = formModel[0];\n\n        fixture.detectChanges();\n    }));\n\n\n    it(\"tests if component initializes correctly\", () => {\n\n        expect(component.type).toEqual(DYNAMIC_FORM_UI_BOOTSTRAP);\n\n        expect(component.control instanceof FormControl).toBe(true);\n        expect(component.controlGroup instanceof FormGroup).toBe(true);\n        expect(component.model instanceof DynamicFormControlModel).toBe(true);\n\n        expect(component.hasErrorMessaging).toBe(false);\n        expect(component.errorMessages).toEqual([]);\n\n        expect(component.onControlValueChanges).toBeDefined();\n        expect(component.onModelDisabledUpdates).toBeDefined();\n        expect(component.onModelValueUpdates).toBeDefined();\n\n        expect(component.blur).toBeDefined();\n        expect(component.change).toBeDefined();\n        expect(component.focus).toBeDefined();\n\n        expect(component.onBlur).toBeDefined();\n        expect(component.onChange).toBeDefined();\n        expect(component.onFocus).toBeDefined();\n\n        expect(component.isCheckbox).toBe(false);\n        expect(component.isCheckboxGroup).toBe(false);\n        expect(component.isRadioGroup).toBe(false);\n        expect(component.isValid).toBe(true);\n        expect(component.isInvalid).toBe(false);\n    });\n});"]}