{"version":3,"sources":["core/src/utils.spec.ts"],"names":[],"mappings":"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","file":"utils.spec.js","sourcesContent":["import * as utils from \"./utils\";\n\ndescribe(\"Utils test suite\", () => {\n\n    describe(\"getValue test suite\", () => {\n        \n        let configObject: any; \n\n        beforeEach(() => {\n\n            configObject = {\n                a: 5,\n                b: true,\n                c: \"test\",\n                d: {\n                    prop1: 2\n                },\n                e: {\n                    prop1: 1,\n                    prop2: {\n                        nested1: 42\n                    }\n                }\n            };\n        });\n\n        it(\"tests if getValue is working correctly\", () => {\n            \n            let valueA = utils.getValue(configObject, \"a\", 4);\n            let valueB = utils.getValue(configObject, \"b\", false);\n            let valueC = utils.getValue(configObject, \"c\", null);\n            let valueD1 = utils.getValue(configObject, \"d\", {prop1: 1});\n            let valueD2= utils.getValue(configObject, \"d\", {prop2: 3});\n            \n            let valueY = utils.getValue(configObject, \"y\", false);\n            let valueZ = utils.getValue(configObject, \"z\", null);\n            \n            expect(valueA).toBe(5);\n            expect(valueB).toBe(true);\n            expect(valueC).toEqual(\"test\");\n            \n            expect(valueD1.prop1).toBe(2);\n            expect(valueD2.prop1).toBe(2);\n            expect(valueD2.prop2).toBe(3);\n            \n            expect(valueY).toBe(false);\n            expect(valueZ).toBeNull();\n        });\n\n        it(\"tests if getValue recursion is working correctly\", () => {\n\n            let valueE = utils.getValue(configObject, \"e\", {\n                prop1: 10, \n                prop2: {\n                    nested1: 21, \n                    nested2: 84\n                },\n                prop3: 100\n            });\n\n            expect(valueE.prop1).toBe(1);\n            \n            expect(valueE.prop2).toBeDefined();\n            expect(valueE.prop2.nested1).toBe(42);\n            \n            expect(valueE.prop2.nested2).toBeDefined();\n            expect(valueE.prop2.nested2).toBe(84);\n\n            expect(valueE.prop3).toBeDefined();\n            expect(valueE.prop3).toBe(100);\n        });\n        \n    });\n\n    describe(\"isEmptyString test suite\", () =>{\n\n        it(\"tests if isEmptyString is working correctly\", () => {\n\n            let testString0 = undefined;\n            let testString1 =  \"\";\n            let testString2 = \"test string\";\n\n            expect(utils.isEmptyString(testString0)).toBe(true);\n            expect(utils.isEmptyString(testString1)).toBe(true);\n            expect(utils.isEmptyString(testString2)).toBe(false);\n        });\n\n    });\n\n});"]}