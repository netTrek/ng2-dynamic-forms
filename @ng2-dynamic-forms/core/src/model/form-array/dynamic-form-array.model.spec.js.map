{"version":3,"sources":["core/src/model/form-array/dynamic-form-array.model.spec.ts"],"names":[],"mappings":";AAAA,sBAAyB,gBAAgB,CAAC,CAAA;AAC1C,yCAAqE,4BAA4B,CAAC,CAAA;AAClG,oCAAgC,8BAA8B,CAAC,CAAA;AAE/D,QAAQ,CAAC,kCAAkC,EAAE;IAEzC,QAAQ,CAAC,0BAA0B,EAAE;QAEjC,IAAI,YAAmC,CAAC;QACxC,IAAI,MAAM,GAAG;YACT,EAAE,EAAE,SAAS;YACb,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,cAAM,OAAA,CAAC,IAAI,uCAAiB,CAAC,EAAC,EAAE,EAAE,cAAc,EAAC,CAAC,CAAC,EAA7C,CAA6C;YAChE,SAAS,EAAE,kBAAU,CAAC,QAAQ;SACjC,CAAC;QAEF,UAAU,CAAC;YACP,YAAY,GAAG,IAAI,gDAAqB,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE;YAElD,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC5D,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YACnE,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,0DAA+B,CAAC,CAAC;YACnE,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC/C,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE;YAE7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;YAEpD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,aAAa,EAAE,CAAC;YAC7C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC/D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,0DAA+B,CAAC,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","file":"dynamic-form-array.model.spec.js","sourcesContent":["import {Validators} from \"@angular/forms\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayModel} from \"./dynamic-form-array.model\";\nimport {DynamicInputModel} from \"../input/dynamic-input.model\";\n\ndescribe(\"DynamicFormArrayModel test suite\", () => {\n\n    describe(\"default model test suite\", () => {\n\n        let defaultModel: DynamicFormArrayModel;\n        let config = {\n            id: \"default\",\n            initialCount: 3,\n            createGroup: () => [new DynamicInputModel({id: \"defaultInput\"})],\n            validator: Validators.required\n        };\n\n        beforeEach(() => {\n            defaultModel = new DynamicFormArrayModel(config);\n        });\n\n        it(\"tests if default model is correctly initialized\", () => {\n\n            expect(defaultModel.initialCount).toBe(config.initialCount);\n            expect(defaultModel.groups.length).toBe(defaultModel.initialCount);\n            expect(defaultModel.id).toEqual(config.id);\n            expect(defaultModel.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_ARRAY);\n            expect(defaultModel.asyncValidator).toBeNull();\n            expect(defaultModel.validator).toBeDefined();\n            expect(defaultModel.createGroup().length).toEqual(1);\n            expect(defaultModel.removeGroup).toBeDefined();\n        });\n\n        it(\"should serialize correctly\", () => {\n\n            let json = JSON.parse(JSON.stringify(defaultModel));\n\n            expect(json.asyncValidators).toBeUndefined();\n            expect(json.id).toEqual(defaultModel.id);\n            expect(json.groups.length).toEqual(defaultModel.groups.length);\n            expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_ARRAY);\n            expect(json.validator).toEqual(\"required\");\n            expect(json.validators).toBeUndefined();\n        });\n\n    });\n\n});"]}