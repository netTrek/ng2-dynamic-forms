{"version":3,"sources":["core/src/model/dynamic-form-control-relation.model.spec.ts"],"names":[],"mappings":";AAAA,uCAAmC,0CAA0C,CAAC,CAAA;AAC9E,oDAKO,uCAAuC,CAAC,CAAA;AAE/C,QAAQ,CAAC,4CAA4C,EAAE;IAEnD,QAAQ,CAAC,0BAA0B,EAAE;QAEjC,IAAI,SAA+B,EAC/B,MAAM,GAAG;YAEL,EAAE,EAAE,SAAS;YACb,KAAK,EAAE,kBAAkB;YACzB,IAAI,EAAE,CAAC;YACP,WAAW,EAAE,kBAAkB;YAC/B,QAAQ,EAAE;gBACN;oBACI,MAAM,EAAE,SAAS;oBACjB,IAAI,EAAE;wBACF;4BACI,EAAE,EAAE,UAAU;4BACd,KAAK,EAAE,UAAU;yBACpB;qBACJ;iBACJ;gBACD;oBACI,MAAM,EAAE,QAAQ;oBAChB,UAAU,EAAE,KAAK;oBACjB,IAAI,EAAE;wBACF;4BACI,EAAE,EAAE,UAAU;4BACd,KAAK,EAAE,UAAU;yBACpB;wBACD;4BACI,EAAE,EAAE,cAAc;4BAClB,KAAK,EAAE,UAAU;yBACpB;qBACJ;iBACJ;aACJ;SACJ,CAAC;QAEN,UAAU,CAAC;YACP,SAAS,GAAG,IAAI,6CAAoB,CAAC,MAAM,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE;YAExD,MAAM,CAAC,yDAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAC9D,MAAM,CAAC,yDAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE;YAEvD,MAAM,CAAC,wDAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7D,MAAM,CAAC,wDAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE;YAE3D,MAAM,CAAC,4DAAsB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YACjE,MAAM,CAAC,4DAAsB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE;YAE5C,MAAM,CAAC,6CAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,6CAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","file":"dynamic-form-control-relation.model.spec.js","sourcesContent":["import {DynamicTextAreaModel} from \"../model/textarea/dynamic-textarea.model\";\nimport {\n    findDisableRelation,\n    findEnableRelation,\n    findActivationRelation,\n    findIds\n} from \"./dynamic-form-control-relation.model\";\n\ndescribe(\"DynamicFormControlRelationModel test suite\", () => {\n\n    describe(\"default model test suite\", () => {\n\n        let testModel: DynamicTextAreaModel,\n            config = {\n\n                id: \"default\",\n                label: \"Example Textarea\",\n                rows: 5,\n                placeholder: \"example Textarea\",\n                relation: [\n                    {\n                        action: \"DISABLE\",\n                        when: [\n                            {\n                                id: \"mySelect\",\n                                value: \"option-4\"\n                            }\n                        ]\n                    },\n                    {\n                        action: \"ENABLE\",\n                        connective: \"AND\",\n                        when: [\n                            {\n                                id: \"mySelect\",\n                                value: \"option-3\"\n                            },\n                            {\n                                id: \"myRadioGroup\",\n                                value: \"option-4\",\n                            }\n                        ]\n                    }\n                ]\n            };\n\n        beforeEach(() => {\n            testModel = new DynamicTextAreaModel(config);\n        });\n\n        it(\"tests if findDisableRelation function works correctly\", () => {\n\n            expect(findDisableRelation(testModel.relation)).toBeDefined();\n            expect(findDisableRelation(testModel.relation)).toBe(config.relation[0]);\n        });\n\n        it(\"tests if findEnableRelation function works correctly\", () => {\n\n            expect(findEnableRelation(testModel.relation)).toBeDefined();\n            expect(findEnableRelation(testModel.relation)).toBe(config.relation[1]);\n        });\n\n        it(\"tests if findActivationRelation function works correctly\", () => {\n\n            expect(findActivationRelation(testModel.relation)).toBeDefined();\n            expect(findActivationRelation(testModel.relation)).toBe(config.relation[0]);\n        });\n\n        it(\"tests if findIds function works correctly\", () => {\n\n            expect(findIds(testModel.relation).length).toBe(2);\n            expect(findIds(testModel.relation).join()).toBe(\"mySelect,myRadioGroup\");\n        });\n\n    });\n\n});"]}