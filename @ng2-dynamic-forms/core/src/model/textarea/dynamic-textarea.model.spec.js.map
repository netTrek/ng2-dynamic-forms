{"version":3,"sources":["core/src/model/textarea/dynamic-textarea.model.spec.ts"],"names":[],"mappings":";AAAA,sBAAyB,gBAAgB,CAAC,CAAA;AAC1C,uCAIO,0BAA0B,CAAC,CAAA;AAElC,QAAQ,CAAC,iCAAiC,EAAE;IAExC,QAAQ,CAAC,0BAA0B,EAAE;QAEjC,IAAI,MAAM,GAAG;YACT,EAAE,EAAE,SAAS;YACb,UAAU,EAAE,CAAC,kBAAU,CAAC,QAAQ,CAAC;SACpC,CAAC;QACF,IAAI,YAAkC,CAAC;QAEvC,UAAU,CAAC;YACP,YAAY,GAAG,IAAI,6CAAoB,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE;YAElD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC9C,MAAM,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACtC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,2DAAkC,CAAC,CAAC;YACtE,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;YACtC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,wDAA+B,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE;YAE7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;YAEpD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACpE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,2DAAkC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","file":"dynamic-textarea.model.spec.js","sourcesContent":["import {Validators} from \"@angular/forms\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA,\n    DYNAMIC_FORM_TEXTAREA_WRAP_SOFT,\n    DynamicTextAreaModel\n} from \"./dynamic-textarea.model\";\n\ndescribe(\"DynamicTextAreaModel test suite\", () => {\n\n    describe(\"default model test suite\", () => {\n\n        let config = {\n            id: \"default\",\n            validators: [Validators.required]\n        };\n        let defaultModel: DynamicTextAreaModel;\n\n        beforeEach(() => {\n            defaultModel = new DynamicTextAreaModel(config);\n        });\n\n        it(\"tests if default model is correctly initialized\", () => {\n\n            expect(defaultModel.cols).toBe(20);\n            expect(defaultModel.disabled).toBe(false);\n            expect(defaultModel.errorMessages).toBeNull();\n            expect(defaultModel.hasErrorMessages).toBe(false);\n            expect(defaultModel.id).toEqual(config.id);\n            expect(defaultModel.label).toBeNull();\n            expect(defaultModel.name).toEqual(defaultModel.id);\n            expect(defaultModel.rows).toBe(2);\n            expect(defaultModel.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA);\n            expect(defaultModel.value).toBeNull();\n            expect(defaultModel.wrap).toEqual(DYNAMIC_FORM_TEXTAREA_WRAP_SOFT);\n        });\n\n        it(\"should serialize correctly\", () => {\n\n            let json = JSON.parse(JSON.stringify(defaultModel));\n\n            expect(json.id).toEqual(defaultModel.id);\n            expect(json.cols).toBe(defaultModel.cols);\n            expect(json.validators.length).toBe(defaultModel.validators.length);\n            expect(json.validators[0]).toEqual(\"required\");\n            expect(json.value).toBe(defaultModel.value);\n            expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA);\n        });\n\n    });\n\n});"]}