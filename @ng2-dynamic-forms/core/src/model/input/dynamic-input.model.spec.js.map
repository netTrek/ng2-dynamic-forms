{"version":3,"sources":["core/src/model/input/dynamic-input.model.spec.ts"],"names":[],"mappings":"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","file":"dynamic-input.model.spec.js","sourcesContent":["import {\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT,\n    DynamicInputModel\n} from \"./dynamic-input.model\";\nimport {AUTOCOMPLETE_ON} from \"../../service/dynamic-form-autofill.service\";\n\ndescribe(\"DynamicInputModel test suite\", () => {\n\n    describe(\"default model test suite\", () => {\n\n        let config = {id: \"default\"};\n        let defaultModel: DynamicInputModel;\n\n        beforeEach(() => {\n            defaultModel = new DynamicInputModel(config);\n        });\n\n        it(\"tests if correct default type property is set\", () => {\n\n            expect(defaultModel.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_INPUT);\n        });\n\n        it(\"tests if correct default input type property is set\", () => {\n\n            expect(defaultModel.inputType).toEqual(DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT);\n        });\n\n        it(\"tests if correct default autoComplete property is set\", () => {\n\n            expect(defaultModel.autoComplete).toEqual(AUTOCOMPLETE_ON);\n        });\n\n        it(\"tests if correct default autoFocus property is set\", () => {\n\n            expect(defaultModel.autoFocus).toBe(false);\n        });\n\n        it(\"tests if correct default cls properties aree set\", () => {\n\n            expect(defaultModel.cls).toBeDefined();\n            expect(defaultModel.cls.element.container).toEqual(\"\");\n            expect(defaultModel.cls.element.control).toEqual(\"\");\n            expect(defaultModel.cls.element.errors).toEqual(\"\");\n            expect(defaultModel.cls.element.label).toEqual(\"\");\n            expect(defaultModel.cls.grid.container).toEqual(\"\");\n            expect(defaultModel.cls.grid.control).toEqual(\"\");\n            expect(defaultModel.cls.grid.errors).toEqual(\"\");\n            expect(defaultModel.cls.grid.label).toEqual(\"\");\n        });\n\n        it(\"tests if correct default hint property is set\", () => {\n\n            expect(defaultModel.hint).toBeNull();\n        });\n\n        it(\"tests if correct default label properties aree set\", () => {\n\n            expect(defaultModel.label).toBeNull();\n        });\n\n        it(\"tests if correct default max property is set\", () => {\n\n            expect(defaultModel.max).toBeNull();\n        });\n\n        it(\"tests if correct default maxLength property is set\", () => {\n\n            expect(defaultModel.maxLength).toBeNull();\n        });\n\n        it(\"tests if correct default minLength property is set\", () => {\n\n            expect(defaultModel.minLength).toBeNull();\n        });\n\n        it(\"tests if correct default min property is set\", () => {\n\n            expect(defaultModel.min).toBeNull();\n        });\n\n        it(\"tests if correct default placeholder property is set\", () => {\n\n            expect(defaultModel.placeholder).toEqual(\"\");\n        });\n\n        it(\"tests if correct default readonly property is set\", () => {\n\n            expect(defaultModel.readOnly).toBe(false);\n        });\n\n        it(\"tests if correct default required property is set\", () => {\n\n            expect(defaultModel.required).toBe(false);\n        });\n\n        it(\"tests if correct default spellcheck property is set\", () => {\n\n            expect(defaultModel.spellCheck).toBe(false);\n        });\n\n        it(\"tests if correct default step property is set\", () => {\n\n            expect(defaultModel.step).toBeNull();\n        });\n\n        it(\"tests if correct default prefix property is set\", () => {\n\n            expect(defaultModel.prefix).toBeNull();\n        });\n\n        it(\"tests if correct default suffix property is set\", () => {\n\n            expect(defaultModel.suffix).toBeNull();\n        });\n\n        it(\"should serialize correctly\", () => {\n\n            let json = JSON.parse(JSON.stringify(defaultModel));\n\n            expect(json.id).toEqual(defaultModel.id);\n            expect(json.disabled).toEqual(defaultModel.disabled);\n            expect(json.value).toBe(defaultModel.value);\n            expect(json.type).toEqual(DYNAMIC_FORM_CONTROL_TYPE_INPUT);\n        });\n\n    });\n\n});"]}