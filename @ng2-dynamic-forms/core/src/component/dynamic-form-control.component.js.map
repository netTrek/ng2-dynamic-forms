{"version":3,"sources":["core/src/component/dynamic-form-control.component.ts"],"names":[],"mappings":"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","file":"dynamic-form-control.component.js","sourcesContent":["import {EventEmitter, TemplateRef, OnInit, OnDestroy} from \"@angular/core\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {Subscription} from \"rxjs/Subscription\";\nimport {DynamicFormControlModel} from \"../model/dynamic-form-control.model\";\nimport {DynamicFormValueControlModel} from \"../model/dynamic-form-value-control.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX} from \"../model/checkbox/dynamic-checkbox.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP} from \"../model/radio/dynamic-radio-group.model\";\nimport {DYNAMIC_FORM_CONTROL_TYPE_SWITCH} from \"../model/switch/dynamic-switch.model\";\nimport {\n    DynamicInputModel,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE\n} from \"../model/input/dynamic-input.model\";\nimport {findIds, findActivationRelation, toBeDisabled} from \"../model/dynamic-form-control-relation.model\";\nimport {isDefined} from \"../utils\";\n\nexport abstract class DynamicFormControlComponent implements OnInit, OnDestroy {\n\n    bindId: boolean;\n    blur: EventEmitter<FocusEvent>;\n    change: EventEmitter<Event>;\n    control: FormControl;\n    controlGroup: FormGroup;\n    customTemplate: TemplateRef<any>;\n    focus: EventEmitter<FocusEvent>;\n    hasErrorMessaging: boolean = false;\n    hasFocus: boolean;\n    model: DynamicFormControlModel;\n    nestedTemplate: TemplateRef<any>;\n\n    private subscriptions: Array<Subscription> = [];\n\n    abstract readonly type: string;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n\n        if (!isDefined(this.model)) {\n            throw new Error(`no model input defined for DynamicFormControlComponent`);\n        }\n\n        if (!isDefined(this.controlGroup)) {\n            throw new Error(`no controlGroup input defined for DynamicFormControlComponent`);\n        }\n\n        this.control = <FormControl> this.controlGroup.get(this.model.id);\n\n        this.subscriptions.push(this.control.valueChanges.subscribe(this.onControlValueChanges.bind(this)));\n        this.subscriptions.push(this.model.disabledUpdates.subscribe(this.onModelDisabledUpdates.bind(this)));\n\n        if (this.model instanceof DynamicFormValueControlModel) {\n\n            let model = <DynamicFormValueControlModel<any>> this.model;\n\n            this.subscriptions.push(model.valueUpdates.subscribe(this.onModelValueUpdates.bind(this)));\n        }\n\n        this.registerControlRelations();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    get errorMessages(): Array<string> {\n\n        let messages = [];\n\n        if (isDefined(this.model[\"errorMessages\"])) {\n\n            for (let validatorName in this.control.errors) {\n\n                let message: string;\n\n                if (this.model[\"errorMessages\"][validatorName]) {\n\n                    message = this.model[\"errorMessages\"][validatorName].replace(/\\{\\{(.+?)\\}\\}/mg,\n                        (match, propertyName) => this.model[propertyName] ? this.model[propertyName] : null);\n\n                } else {\n                    message = `Validation \"${validatorName}\" failed`;\n                }\n\n                messages.push(message);\n            }\n        }\n\n        return messages;\n    }\n\n    get isCheckbox(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n    }\n\n    get isCheckboxGroup(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\n    }\n\n    get isRadioGroup(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\n    }\n\n    get isSwitch(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.touched && this.control.invalid;\n    }\n\n    registerControlRelations(): void {\n\n        if (this.model.relation.length > 0 && findActivationRelation(this.model.relation)) {\n\n            this.setControlActivationState();\n\n            findIds(this.model.relation).forEach(controlId => {\n\n                if (this.model.id === controlId) {\n                    throw new Error(`FormControl ${this.model.id} cannot depend on itself`);\n                }\n\n                let control: FormControl = <FormControl> this.controlGroup.get(controlId);\n\n                if (control) {\n\n                    this.subscriptions.push(control.valueChanges.subscribe(\n                        value => this.setControlActivationState())\n                    );\n\n                    this.subscriptions.push(control.statusChanges.subscribe(\n                        status => this.setControlActivationState())\n                    );\n                }\n            });\n        }\n    }\n\n    setControlActivationState(): void {\n\n        this.model.disabledUpdates.next(\n            toBeDisabled(findActivationRelation(this.model.relation), this.controlGroup)\n        );\n    }\n\n    onControlValueChanges(value: any) {\n\n        if (this.model instanceof DynamicFormValueControlModel) {\n            (<DynamicFormValueControlModel<any>> this.model).value = value;\n        }\n        //@exclude\n        console.log(this.model.id + \" field changed to: \", value, typeof value, this.control.valid, this.model);\n        //@endexclude\n    }\n\n    onModelDisabledUpdates(value: boolean) {\n        value ? this.control.disable() : this.control.enable();\n    }\n\n    onModelValueUpdates(value: any) {\n        this.control.setValue(value);\n    }\n\n    onBlur($event: FocusEvent) {\n\n        this.blur.emit($event);\n        this.hasFocus = false;\n\n        //@exclude\n        console.log($event, this.model.id + \" field is blurred\");\n        //@endexclude\n    }\n\n    onChange($event: Event) {\n\n        this.change.emit($event);\n\n        if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\n\n            let inputModel = <DynamicInputModel> this.model;\n\n            if (inputModel.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\n                inputModel.files = $event.srcElement[\"files\"];\n            }\n        }\n\n        //@exclude\n        console.log($event, this.model.id + \" field is changed\", $event);\n        //@endexclude\n    }\n\n    onFocus($event: FocusEvent) {\n\n        this.focus.emit($event);\n        this.hasFocus = true;\n\n        //@exclude\n        console.log($event, this.model.id + \" field is focused\");\n        //@endexclude\n    }\n}"]}