{"version":3,"sources":["core/src/service/dynamic-form.service.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form.service.spec.js","sourcesContent":["import {TestBed, inject} from \"@angular/core/testing\";\nimport {ReactiveFormsModule, FormGroup, FormControl, FormArray} from \"@angular/forms\";\nimport {DynamicFormService} from \"./dynamic-form.service\";\nimport {DynamicCheckboxModel} from \"../model/checkbox/dynamic-checkbox.model\";\nimport {DynamicCheckboxGroupModel} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport {DynamicFormArrayModel} from \"../model/form-array/dynamic-form-array.model\";\nimport {DynamicFormControlModel} from \"../model/dynamic-form-control.model\";\nimport {DynamicInputModel} from \"../model/input/dynamic-input.model\";\nimport {DynamicRadioGroupModel} from \"../model/radio/dynamic-radio-group.model\";\nimport {DynamicSelectModel} from \"../model/select/dynamic-select.model\";\nimport {DynamicTextAreaModel} from \"../model/textarea/dynamic-textarea.model\";\n\ndescribe(\"DynamicFormService test suite\", () => {\n\n    let testModel;\n\n    beforeEach(() => {\n\n        TestBed.configureTestingModule({\n            imports: [ReactiveFormsModule],\n            providers: [DynamicFormService]\n        });\n\n        testModel = [\n\n            new DynamicSelectModel<string>(\n                {\n                    id: \"testSelect\",\n                    options: [\n                        {\n                            label: \"Option 1\",\n                            value: \"option-1\",\n                        },\n                        {\n                            label: \"Option 2\",\n                            value: \"option-2\"\n                        }\n                    ],\n                    value: \"option-3\"\n                }\n            ),\n\n            new DynamicInputModel({id: \"testInput\",}),\n\n            new DynamicCheckboxGroupModel(\n                {\n                    id: \"testCheckboxGroup\",\n                    group: [\n                        new DynamicCheckboxModel(\n                            {\n                                id: \"testCheckboxGroup1\",\n                                value: true\n                            }\n                        ),\n                        new DynamicCheckboxModel(\n                            {\n                                id: \"testCheckboxGroup2\",\n                                value: true\n                            }\n                        )\n                    ]\n                }\n            ),\n\n            new DynamicRadioGroupModel<string>(\n                {\n                    id: \"testRadioGroup\",\n                    options: [\n                        {\n                            label: \"Option 1\",\n                            value: \"option-1\",\n                        },\n                        {\n                            label: \"Option 2\",\n                            value: \"option-2\"\n                        }\n                    ],\n                    value: \"option-3\"\n                }\n            ),\n\n            new DynamicTextAreaModel({id: \"testTextArea\"}),\n\n            new DynamicCheckboxModel({id: \"testCheckbox\"}),\n\n            new DynamicFormArrayModel(\n                {\n                    id: \"testFormArray\",\n                    initialCount: 5,\n                    createGroup: () => {\n                        return [\n                            new DynamicInputModel({id: \"basicArrayGroupInput\"})\n                        ];\n                    }\n                }\n            )\n        ];\n    });\n\n\n    it(\"tests if service is initialized correctly\", inject([DynamicFormService], service => {\n\n        expect(service).toBeDefined();\n    }));\n\n\n    it(\"tests if createFormGroup works correctly\", inject([DynamicFormService], service => {\n\n        expect(service.createFormGroup).toBeDefined();\n\n        let result = service.createFormGroup(testModel);\n\n        expect(result instanceof FormGroup).toBe(true);\n\n        expect(result.get(\"testCheckbox\") instanceof FormControl).toBe(true);\n        expect(result.get(\"testCheckboxGroup\") instanceof FormGroup).toBe(true);\n        expect(result.get(\"testFormArray\") instanceof FormArray).toBe(true);\n        expect(result.get(\"testInput\") instanceof FormControl).toBe(true);\n        expect(result.get(\"testRadioGroup\") instanceof FormControl).toBe(true);\n        expect(result.get(\"testSelect\") instanceof FormControl).toBe(true);\n        expect(result.get(\"testTextArea\") instanceof FormControl).toBe(true);\n    }));\n\n\n    it(\"tests if fromJSON works correctly\", inject([DynamicFormService], service => {\n\n        let json = JSON.parse(JSON.stringify(testModel)),\n            formModel;\n\n        expect(service.fromJSON).toBeDefined();\n\n        formModel = service.fromJSON(json);\n\n        expect(Array.isArray(formModel)).toBe(true);\n\n        expect(formModel[0] instanceof DynamicSelectModel).toBe(true);\n        expect(formModel[1] instanceof DynamicInputModel).toBe(true);\n        expect(formModel[2] instanceof DynamicCheckboxGroupModel).toBe(true);\n        expect(formModel[2][\"group\"].length).toBe(testModel[2].group.length);\n        expect(formModel[3] instanceof DynamicRadioGroupModel).toBe(true);\n        expect(formModel[4] instanceof DynamicTextAreaModel).toBe(true);\n        expect(formModel[5] instanceof DynamicCheckboxModel).toBe(true);\n        expect(formModel[6] instanceof DynamicFormArrayModel).toBe(true);\n    }));\n\n\n    it(\"tests if findById works correctly\", inject([DynamicFormService], service => {\n\n        expect(service.findById).toBeDefined();\n        expect(service.findById(\"testCheckbox\", testModel) instanceof DynamicFormControlModel).toBe(true);\n        expect(service.findById(\"testCheckboxGroup\", testModel) instanceof DynamicFormControlModel).toBe(true);\n        expect(service.findById(\"testFormArray\", testModel) instanceof DynamicFormControlModel).toBe(true);\n        expect(service.findById(\"testInput\", testModel) instanceof DynamicFormControlModel).toBe(true);\n        expect(service.findById(\"testRadioGroup\", testModel) instanceof DynamicFormControlModel).toBe(true);\n        expect(service.findById(\"testSelect\", testModel) instanceof DynamicFormControlModel).toBe(true);\n        expect(service.findById(\"testTextArea\", testModel) instanceof DynamicFormControlModel).toBe(true);\n    }));\n\n\n    it(\"tests if createFormArray works correctly\", inject([DynamicFormService], service => {\n\n        let model = service.findById(\"testFormArray\", testModel),\n            formArray;\n\n        expect(service.createFormArray).toBeDefined();\n\n        formArray = service.createFormArray(model);\n\n        expect(formArray instanceof FormArray).toBe(true);\n        expect(formArray.length).toBe(model.initialCount);\n    }));\n\n\n    it(\"tests if createFormArrayGroup works correctly\", inject([DynamicFormService], service => {\n\n        let model = service.findById(\"testFormArray\", testModel);\n\n        expect(service.createFormArrayGroup).toBeDefined();\n        expect(service.createFormArrayGroup(model) instanceof FormGroup).toBe(true);\n    }));\n\n\n    it(\"tests if addFormArrayGroup works correctly\", inject([DynamicFormService], service => {\n\n        let model = service.findById(\"testFormArray\", testModel),\n            formArray = service.createFormArray(model);\n\n        expect(service.addFormArrayGroup).toBeDefined();\n\n        service.addFormArrayGroup(formArray, model);\n\n        expect(formArray.length).toBe(model.initialCount + 1);\n    }));\n\n\n    it(\"tests if insertFormArrayGroup work correctly\", inject([DynamicFormService], service => {\n\n        let model = service.findById(\"testFormArray\", testModel),\n            formArray = service.createFormArray(model);\n\n        expect(service.insertFormArrayGroup).toBeDefined();\n\n        service.insertFormArrayGroup(0, formArray, model);\n\n        expect(formArray.length).toBe(model.initialCount + 1);\n    }));\n\n\n    it(\"tests if removeFormArrayGroup work correctly\", inject([DynamicFormService], service => {\n\n        let model = service.findById(\"testFormArray\", testModel),\n            formArray = service.createFormArray(model);\n\n        expect(service.removeFormArrayGroup).toBeDefined();\n\n        service.removeFormArrayGroup(0, formArray, model);\n\n        expect(formArray.length).toBe(model.initialCount - 1);\n    }));\n\n\n    it(\"tests if clearFormArray work correctly\", inject([DynamicFormService], service => {\n\n        let model = service.findById(\"testFormArray\", testModel),\n            formArray = service.createFormArray(model);\n\n        expect(service.clearFormArray).toBeDefined();\n\n        service.clearFormArray(formArray, model);\n\n        expect(formArray.length).toBe(0);\n    }));\n\n});"]}